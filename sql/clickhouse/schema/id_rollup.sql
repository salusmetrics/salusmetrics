DROP TABLE IF EXISTS SALUS_METRICS.HEIRARCHY_EVENT;

CREATE TABLE SALUS_METRICS.HEIRARCHY_EVENT (
    `api_key` LowCardinality (String) CODEC (ZSTD (1)),
    `site` LowCardinality (String) CODEC (ZSTD (1)),
    `visitor` UUID CODEC (ZSTD (1)),
    `session` UUID CODEC (ZSTD (1)),
    `section` UUID CODEC (ZSTD (1)),
    `ts` DateTime CODEC (Delta (4), ZSTD (1))
) ENGINE = MergeTree
ORDER BY
    (api_key, site, visitor, session, section);

DROP TABLE IF EXISTS SALUS_METRICS.heirarchy_event_mv;

CREATE MATERIALIZED VIEW SALUS_METRICS.heirarchy_event_mv TO SALUS_METRICS.HEIRARCHY_EVENT AS
SELECT
    SALUS_METRICS.SECTION_EVENT.api_key as api_key,
    SALUS_METRICS.SECTION_EVENT.site as site,
    SALUS_METRICS.VISITOR_EVENT.id as visitor,
    SALUS_METRICS.SESSION_EVENT.id as session,
    SALUS_METRICS.SECTION_EVENT.id as section,
    SALUS_METRICS.SECTION_EVENT.ts as ts
FROM
    SALUS_METRICS.SECTION_EVENT
    INNER JOIN SALUS_METRICS.SESSION_EVENT ON (
        SALUS_METRICS.SESSION_EVENT.id = SALUS_METRICS.SECTION_EVENT.parent
        AND SALUS_METRICS.SESSION_EVENT.api_key = SALUS_METRICS.SECTION_EVENT.api_key
        AND SALUS_METRICS.SESSION_EVENT.site = SALUS_METRICS.SECTION_EVENT.site
    )
    INNER JOIN SALUS_METRICS.VISITOR_EVENT ON (
        SALUS_METRICS.SESSION_EVENT.parent = SALUS_METRICS.VISITOR_EVENT.id
        AND SALUS_METRICS.SESSION_EVENT.api_key = SALUS_METRICS.VISITOR_EVENT.api_key
        AND SALUS_METRICS.SESSION_EVENT.site = SALUS_METRICS.VISITOR_EVENT.site
    );
