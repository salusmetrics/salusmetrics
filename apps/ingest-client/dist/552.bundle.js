(()=>{"use strict";var e,t;!function(e){e[e.BadRequest=0]="BadRequest",e[e.ConfigurationError=1]="ConfigurationError",e[e.FetchError=2]="FetchError",e[e.InternalServerError=3]="InternalServerError",e[e.Timeout=4]="Timeout"}(e||(e={})),function(e){e[e.Invalid=0]="Invalid",e[e.InvalidApiKey=1]="InvalidApiKey",e[e.InvalidHost=2]="InvalidHost",e[e.Success=3]="Success"}(t||(t={}));var s;class r{constructor(e){if(function(e){if(e.api_key.trim().length<1)return t.InvalidApiKey;const s=URL.parse(e.host);return null==s||s.pathname.length>1||s.search.length>0||s.hash.length>0?t.InvalidHost:t.Success}(e)!=t.Success)throw new Error("Invalid Event Publisher Configuration");this.api_key=e.api_key,this.endpoint=e.host+"/multi"}publish(t){return s=this,r=void 0,n=function*(){try{const s=yield fetch(this.createRequest(t));return s.ok?{count:t.length}:500==s.status?e.InternalServerError:400==s.status?e.BadRequest:e.Timeout}catch(t){return e.FetchError}},new((i=void 0)||(i=Promise))((function(e,t){function o(e){try{h(n.next(e))}catch(e){t(e)}}function u(e){try{h(n.throw(e))}catch(e){t(e)}}function h(t){var s;t.done?e(t.value):(s=t.value,s instanceof i?s:new i((function(e){e(s)}))).then(o,u)}h((n=n.apply(s,r||[])).next())}));var s,r,i,n}createRequest(e){return new Request(this.endpoint,{method:"POST",mode:"cors",headers:{"content-type":"application/json","api-key":this.api_key},priority:"low",keepalive:!0,body:JSON.stringify(e)})}}!function(e){e[e.ConfigureRequest=0]="ConfigureRequest",e[e.ConfigureResult=1]="ConfigureResult",e[e.PublishError=2]="PublishError",e[e.PublishRequest=3]="PublishRequest",e[e.PublishResult=4]="PublishResult"}(s||(s={}));const i=self,n=new class{constructor(e){this.httpPublisher=void 0,this.workerContext=e}configurePublisher(e){try{this.httpPublisher=new r(e.config)}catch(r){const i={configurationState:t.Invalid,id:e.id,messageType:s.ConfigureResult};this.postResponse(i)}}publishEvents(t){if(null!=this.httpPublisher)if(t.events.length<1){const r={id:t.id,errorType:e.BadRequest,errorMessage:"Request to publish empty set of events",messageType:s.PublishError};this.postResponse(r)}else this.httpPublisher.publish(t.events).then((e=>this.publishResult(t.id,e)));else{const r={id:t.id,errorType:e.ConfigurationError,errorMessage:"Publish event request received prior to configuration",messageType:s.PublishError};this.postResponse(r)}}publishResult(e,t){const r={id:e,messageType:s.PublishResult,result:t};this.postResponse(r)}postResponse(e){this.workerContext.postMessage(e)}proxyMessage(e){const t=e.data;t.messageType==s.ConfigureRequest?this.configurePublisher(t):t.messageType==s.PublishRequest&&this.publishEvents(t)}}(i);i.addEventListener("message",(e=>n.proxyMessage(e)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,