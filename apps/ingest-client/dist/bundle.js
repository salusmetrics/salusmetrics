(()=>{"use strict";var e={m:{},u:e=>e+".bundle.js"};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),e.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var r=e.g.document;if(!t&&r&&(r.currentScript&&"SCRIPT"===r.currentScript.tagName.toUpperCase()&&(t=r.currentScript.src),!t)){var i=r.getElementsByTagName("script");if(i.length)for(var s=i.length-1;s>-1&&(!t||!/^http(s?):/.test(t));)t=i[s--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href;const t=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i,r=function(e){return"string"==typeof e&&t.test(e)};let i;const s=new Uint8Array(16);function n(){if(!i){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");i=crypto.getRandomValues.bind(crypto)}return i(s)}const o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));const u={};function a(e,t,r,i,s=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(i){if(s<0||s+16>i.length)throw new RangeError(`UUID byte range ${s}:${s+15} is out of buffer bounds`)}else i=new Uint8Array(16),s=0;return t??=Date.now(),r??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],i[s++]=t/1099511627776&255,i[s++]=t/4294967296&255,i[s++]=t/16777216&255,i[s++]=t/65536&255,i[s++]=t/256&255,i[s++]=255&t,i[s++]=112|r>>>28&15,i[s++]=r>>>20&255,i[s++]=128|r>>>14&63,i[s++]=r>>>6&255,i[s++]=r<<2&255|3&e[10],i[s++]=e[11],i[s++]=e[12],i[s++]=e[13],i[s++]=e[14],i[s++]=e[15],i}const c=function(e,t,r){let i;if(e)i=a(e.random??e.rng?.()??n(),e.msecs,e.seq,t,r);else{const e=Date.now(),s=n();!function(e,t,r){e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=r[6]<<23|r[7]<<16|r[8]<<8|r[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++)}(u,e,s),i=a(s,u.msecs,u.seq,t,r)}return t?i:function(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}(i)};var h,l,f,d,S,g,p;function v(e){return!(void 0===e||"number"!=typeof e.event_type||"string"!=typeof e.id||!r(e.id)||7!=function(e){if(!r(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}(e.id))}!function(e){e[e.Visitor=1]="Visitor",e[e.Session=2]="Session",e[e.Section=3]="Section",e[e.Click=4]="Click"}(h||(h={}));class y{constructor(){this.event_type=h.Visitor,this.id=c()}toPublishEvent(){return{t:this.event_type,i:this.id,a:void 0}}}class m{constructor(e){this.event_type=h.Session,this.id=c(),this.parent=e}toPublishEvent(){const e={parent:this.parent.id};return{t:this.event_type,i:this.id,a:e}}}class R{constructor(e){this.event_type=h.Section,this.id=c(),this.parent=e}toPublishEvent(){const e={parent:this.parent.id};return{t:this.event_type,i:this.id,a:e}}}class b{constructor(e){this.event_type=h.Click,this.id=c(),this.parent=e}toPublishEvent(){const e={parent:this.parent.id};return{t:this.event_type,i:this.id,a:e}}}function E(e){return"number"==typeof e}!function(e){e[e.BadRequestError=0]="BadRequestError",e[e.ConfigurationError=1]="ConfigurationError",e[e.InternalError=2]="InternalError"}(l||(l={})),function(e){e[e.BadRequest=0]="BadRequest",e[e.ConfigurationError=1]="ConfigurationError",e[e.InternalError=2]="InternalError"}(f||(f={})),function(e){e[e.BadRequest=0]="BadRequest",e[e.ConfigurationError=1]="ConfigurationError",e[e.FetchError=2]="FetchError",e[e.InternalServerError=3]="InternalServerError",e[e.Timeout=4]="Timeout"}(d||(d={})),function(e){e[e.Invalid=0]="Invalid",e[e.InvalidApiKey=1]="InvalidApiKey",e[e.InvalidHost=2]="InvalidHost",e[e.Success=3]="Success"}(S||(S={})),function(e){e[e.InternalError=0]="InternalError",e[e.MalformedData=1]="MalformedData",e[e.NotFound=2]="NotFound"}(g||(g={})),function(e){e[e.ConfigureRequest=0]="ConfigureRequest",e[e.ConfigureResult=1]="ConfigureResult",e[e.PublishError=2]="PublishError",e[e.PublishRequest=3]="PublishRequest",e[e.PublishResult=4]="PublishResult"}(p||(p={}));const w="SALUS",I="VISITOR",P="SESSION";let C="abc-xyz",_=new class{constructor(e){if(e.trim().length<1)throw new TypeError("invalid empty api_key");this.api_key=e,this.section=void 0}clearSiteState(){return this.clearSection(),this.clearSession(),this.clearVisitor(),{visitor:void 0,session:void 0,section:void 0}}getSiteState(){const e=this.getVisitor();let t;if("number"==typeof e)return e;t=e;const r=this.getSession();let i;if("number"==typeof r)return r==g.MalformedData||r==g.InternalError?r:{visitor:t,session:void 0,section:void 0};i=r;const s=this.getSection();let n;if("number"==typeof s){if(s==g.MalformedData||s==g.InternalError)return s}else n=s;return{visitor:t,session:i,section:n}}setSiteState(e){const t=e.section;if(void 0===t)this.clearSection();else{const e=this.setSection(t);if(!v(e))return e}const r=e.session;if(void 0===r)this.clearSession();else{const e=this.setSession(r);if(!v(e))return e}const i=e.visitor;if(void 0===i)this.clearVisitor();else{const e=this.setVisitor(i);if(!v(e))return e}return e}getVisitor(){const e=[w,I,this.api_key].join("_"),t=localStorage.getItem(e);if(null==t)return g.NotFound;const r={id:t,event_type:h.Visitor};return v(r)?r:g.MalformedData}setVisitor(e){const t=[w,I,this.api_key].join("_");try{localStorage.setItem(t,e.id)}catch(e){return g.InternalError}return e}clearVisitor(){const e=[w,I,this.api_key].join("_");localStorage.removeItem(e)}getSession(){const e=[w,P,this.api_key].join("_"),t=sessionStorage.getItem(e);if(null==t)return g.NotFound;const r={id:t,event_type:h.Session};return v(r)?r:g.MalformedData}setSession(e){const t=[w,P,this.api_key].join("_");try{sessionStorage.setItem(t,e.id)}catch(e){return g.InternalError}return e}clearSession(){const e=[w,P,this.api_key].join("_");localStorage.removeItem(e)}getSection(){return null==this.section?g.NotFound:this.section}setSection(e){return this.section=e,this.section}clearSection(){this.section=void 0}}(C),q=new class{constructor(t,r){if(this.errorHandler=r,this.configurationState=void 0,function(e){if(e.api_key.trim().length<1)return S.InvalidApiKey;const t=URL.parse(e.host);return null==t||t.pathname.length>1||t.search.length>0||t.hash.length>0?S.InvalidHost:S.Success}(t)!=S.Success)throw null!=this.errorHandler&&this.errorHandler("Error constructing WorkerPublisherGateway - Invalid Configuration"),new Error("Invalid Event Publisher Configuration");this.promiseRegistry={},this.workerPublisher=new Worker(new URL(e.p+e.u(552),e.b)),this.workerPublisher.addEventListener("message",(e=>this.routeMessage(e))),this.workerPublisher.addEventListener("error",(e=>{null!=this.errorHandler&&this.errorHandler(e.message)})),this.postConfigRequest(t)}publish(e){const t=this.createPublishMessage(e);return new Promise(((e,r)=>{this.registerPublishPromise(t,{resolve:e,reject:r}),this.postPublishRequest(t)}))}routeMessage(e){const t=e.data;t.messageType==p.ConfigureResult?(this.configurationState=t.configurationState,this.configurationState!=S.Success&&null!=this.errorHandler&&this.errorHandler("Worker event publisher failed")):this.resolvePublish(t)}resolvePublish(e){const t=this.promiseRegistry[e.id];if(null==t){if(null!=this.errorHandler)return void this.errorHandler("Event Publish Result had no matching handlers in registry")}else e.messageType==p.PublishResult?t.resolve(e.result):t.reject(e.errorMessage),delete this.promiseRegistry[e.id]}createPublishMessage(e){return{id:c(),messageType:p.PublishRequest,events:e}}registerPublishPromise(e,t){this.promiseRegistry[e.id]=t}postPublishRequest(e){this.workerPublisher.postMessage(e)}postConfigRequest(e){const t={config:e,id:c(),messageType:p.ConfigureRequest};this.workerPublisher.postMessage(t)}}({api_key:C,host:"http://localhost:3000"},(e=>console.log(e))),V=new class{constructor(e,t){this.publisher=e,this.siteStateRepository=t,this.eventQueue=[],this.siteStateWriteBuffer=void 0}getSiteState(){if(null!=this.siteStateWriteBuffer)return this.siteStateWriteBuffer;const e=this.siteStateRepository.getSiteState();return E(e)?this.siteStateWriteBuffer={visitor:void 0,session:void 0,section:void 0}:this.siteStateWriteBuffer=e,this.siteStateWriteBuffer}writeSiteState(){let e;return e=null!=this.siteStateWriteBuffer?this.siteStateRepository.setSiteState(this.siteStateWriteBuffer):this.siteStateRepository.clearSiteState(),this.siteStateWriteBuffer=void 0,e}setVisitorReference(e){this.siteStateWriteBuffer={visitor:e,session:void 0,section:void 0}}setSessionReference(e){this.siteStateWriteBuffer={visitor:this.getSiteState().visitor,session:e,section:void 0}}setSectionReference(e){this.siteStateWriteBuffer={visitor:this.getSiteState().visitor,session:this.getSiteState().session,section:e}}flush(){if(E(this.writeSiteState()))return new Promise((e=>e(f.InternalError)));const e=this.publisher.publish(this.eventQueue.map((e=>e.toPublishEvent()))).then((e=>this.mapEventPublishResultToEventRegistryResult(e)));return this.eventQueue=[],e}mapEventPublishResultToEventRegistryResult(e){return"number"==typeof e?e==d.BadRequest?f.BadRequest:e==d.ConfigurationError?f.ConfigurationError:f.InternalError:e}registerVisitor(){return this.createVisitor(),this.flush()}deregisterVisitor(){return this.setVisitorReference(void 0),this.flush()}createVisitor(){const e=new y;return this.setVisitorReference(e),this.eventQueue.push(e),e}getOrCreateVisitorReference(){const e=this.getSiteState().visitor;return null!=e?e:this.createVisitor()}registerSession(){return this.createSession(),this.flush()}deregisterSession(){return this.setSessionReference(void 0),this.flush()}createSession(){const e=this.getOrCreateVisitorReference(),t=new m(e);return this.setSessionReference(t),this.eventQueue.push(t),t}getOrCreateSessionReference(){const e=this.getSiteState().session;return null!=e?e:this.createSession()}registerSection(){return this.createSection(),this.flush()}deregisterSection(){return this.setSectionReference(void 0),this.flush()}createSection(){const e=this.getOrCreateSessionReference(),t=new R(e);return this.setSectionReference(t),this.eventQueue.push(t),t}getOrCreateSectionReference(){const e=this.getSiteState().section;return null!=e?e:this.createSection()}registerClick(){return this.createClick(),this.flush()}createClick(){const e=this.getOrCreateSectionReference(),t=new b(e);return this.eventQueue.push(t),t}}(q,_);V.registerSection()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,