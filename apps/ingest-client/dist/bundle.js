(()=>{"use strict";var t;let e;!function(t){t[t.Visitor=1]="Visitor",t[t.Session=2]="Session",t[t.Section=3]="Section",t[t.Click=4]="Click"}(t||(t={}));const n=new Uint8Array(16);function s(){if(!e){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");e=crypto.getRandomValues.bind(crypto)}return e(n)}const i=[];for(let t=0;t<256;++t)i.push((t+256).toString(16).slice(1));const r={};function o(t,e,n,s,i=0){if(t.length<16)throw new Error("Random bytes length must be >= 16");if(s){if(i<0||i+16>s.length)throw new RangeError(`UUID byte range ${i}:${i+15} is out of buffer bounds`)}else s=new Uint8Array(16),i=0;return e??=Date.now(),n??=127*t[6]<<24|t[7]<<16|t[8]<<8|t[9],s[i++]=e/1099511627776&255,s[i++]=e/4294967296&255,s[i++]=e/16777216&255,s[i++]=e/65536&255,s[i++]=e/256&255,s[i++]=255&e,s[i++]=112|n>>>28&15,s[i++]=n>>>20&255,s[i++]=128|n>>>14&63,s[i++]=n>>>6&255,s[i++]=n<<2&255|3&t[10],s[i++]=t[11],s[i++]=t[12],s[i++]=t[13],s[i++]=t[14],s[i++]=t[15],s}const c=function(t,e,n){let c;if(t)c=o(t.random??t.rng?.()??s(),t.msecs,t.seq,e,n);else{const t=Date.now(),i=s();!function(t,e,n){t.msecs??=-1/0,t.seq??=0,e>t.msecs?(t.seq=n[6]<<23|n[7]<<16|n[8]<<8|n[9],t.msecs=e):(t.seq=t.seq+1|0,0===t.seq&&t.msecs++)}(r,t,i),c=o(i,r.msecs,r.seq,e,n)}return e?c:function(t,e=0){return(i[t[e+0]]+i[t[e+1]]+i[t[e+2]]+i[t[e+3]]+"-"+i[t[e+4]]+i[t[e+5]]+"-"+i[t[e+6]]+i[t[e+7]]+"-"+i[t[e+8]]+i[t[e+9]]+"-"+i[t[e+10]]+i[t[e+11]]+i[t[e+12]]+i[t[e+13]]+i[t[e+14]]+i[t[e+15]]).toLowerCase()}(c)};var a;!function(t){t[t.BadRequest=0]="BadRequest",t[t.InternalServerError=1]="InternalServerError",t[t.Timeout=2]="Timeout"}(a||(a={}));let u=new class{constructor(){this.event_type=t.Visitor,this.id=c()}toClientEvent(){return{t:this.event_type,i:this.id,a:void 0}}},h=new class{constructor(e){this.event_type=t.Session,this.id=c(),this.parent=e}toClientEvent(){const t={parent:this.parent.id};return{t:this.event_type,i:this.id,a:t}}}(u),p=new class{constructor(e){this.event_type=t.Section,this.id=c(),this.parent=e}toClientEvent(){const t={parent:this.parent.id};return{t:this.event_type,i:this.id,a:t}}}(h),l=new class{constructor(e){this.event_type=t.Click,this.id=c(),this.parent=e}toClientEvent(){const t={parent:this.parent.id};return{t:this.event_type,i:this.id,a:t}}}(p);new class{constructor(t,e){this.api_key=t,this.endpoint=e+"/multi"}publish(t){return e=this,n=void 0,i=function*(){const e=yield fetch(this.createRequest(t));return e.ok?{count:t.length}:500==e.status?a.InternalServerError:400==e.status?a.BadRequest:a.Timeout},new((s=void 0)||(s=Promise))((function(t,r){function o(t){try{a(i.next(t))}catch(t){r(t)}}function c(t){try{a(i.throw(t))}catch(t){r(t)}}function a(e){var n;e.done?t(e.value):(n=e.value,n instanceof s?n:new s((function(t){t(n)}))).then(o,c)}a((i=i.apply(e,n||[])).next())}));var e,n,s,i}createRequest(t){return new Request(this.endpoint,{method:"POST",mode:"cors",headers:{"content-type":"application/json","api-key":this.api_key},body:JSON.stringify(t.map((t=>t.toClientEvent())))})}}("abc-xyz","http://localhost:3000").publish([u,h,p,l])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,