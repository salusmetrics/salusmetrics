(()=>{"use strict";let t;const e=new Uint8Array(16);function n(){if(!t){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");t=crypto.getRandomValues.bind(crypto)}return t(e)}const s=[];for(let t=0;t<256;++t)s.push((t+256).toString(16).slice(1));const i={};function r(t,e,n,s,i=0){if(t.length<16)throw new Error("Random bytes length must be >= 16");if(s){if(i<0||i+16>s.length)throw new RangeError(`UUID byte range ${i}:${i+15} is out of buffer bounds`)}else s=new Uint8Array(16),i=0;return e??=Date.now(),n??=127*t[6]<<24|t[7]<<16|t[8]<<8|t[9],s[i++]=e/1099511627776&255,s[i++]=e/4294967296&255,s[i++]=e/16777216&255,s[i++]=e/65536&255,s[i++]=e/256&255,s[i++]=255&e,s[i++]=112|n>>>28&15,s[i++]=n>>>20&255,s[i++]=128|n>>>14&63,s[i++]=n>>>6&255,s[i++]=n<<2&255|3&t[10],s[i++]=t[11],s[i++]=t[12],s[i++]=t[13],s[i++]=t[14],s[i++]=t[15],s}const o=function(t,e,o){let c;if(t)c=r(t.random??t.rng?.()??n(),t.msecs,t.seq,e,o);else{const t=Date.now(),s=n();!function(t,e,n){t.msecs??=-1/0,t.seq??=0,e>t.msecs?(t.seq=n[6]<<23|n[7]<<16|n[8]<<8|n[9],t.msecs=e):(t.seq=t.seq+1|0,0===t.seq&&t.msecs++)}(i,t,s),c=r(s,i.msecs,i.seq,e,o)}return e?c:function(t,e=0){return(s[t[e+0]]+s[t[e+1]]+s[t[e+2]]+s[t[e+3]]+"-"+s[t[e+4]]+s[t[e+5]]+"-"+s[t[e+6]]+s[t[e+7]]+"-"+s[t[e+8]]+s[t[e+9]]+"-"+s[t[e+10]]+s[t[e+11]]+s[t[e+12]]+s[t[e+13]]+s[t[e+14]]+s[t[e+15]]).toLowerCase()}(c)};var c,u;!function(t){t[t.Visitor=1]="Visitor",t[t.Session=2]="Session",t[t.Section=3]="Section",t[t.Click=4]="Click"}(c||(c={})),function(t){t[t.BadRequest=0]="BadRequest",t[t.InternalServerError=1]="InternalServerError",t[t.Timeout=2]="Timeout"}(u||(u={}));let a=new class{constructor(){this.event_type=c.Visitor,this.id=o()}toClientEvent(){return{t:this.event_type,i:this.id,a:void 0}}},h=new class{constructor(t){this.event_type=c.Session,this.id=o(),this.parent=t}toClientEvent(){const t={parent:this.parent.id};return{t:this.event_type,i:this.id,a:t}}}(a),p=new class{constructor(t){this.event_type=c.Section,this.id=o(),this.parent=t}toClientEvent(){const t={parent:this.parent.id};return{t:this.event_type,i:this.id,a:t}}}(h),l=new class{constructor(t){this.event_type=c.Click,this.id=o(),this.parent=t}toClientEvent(){const t={parent:this.parent.id};return{t:this.event_type,i:this.id,a:t}}}(p);new class{constructor(t,e){this.api_key=t,this.endpoint=e+"/multi"}publish(t){return e=this,n=void 0,i=function*(){const e=yield fetch(this.createRequest(t));return e.ok?{count:t.length}:500==e.status?u.InternalServerError:400==e.status?u.BadRequest:u.Timeout},new((s=void 0)||(s=Promise))((function(t,r){function o(t){try{u(i.next(t))}catch(t){r(t)}}function c(t){try{u(i.throw(t))}catch(t){r(t)}}function u(e){var n;e.done?t(e.value):(n=e.value,n instanceof s?n:new s((function(t){t(n)}))).then(o,c)}u((i=i.apply(e,n||[])).next())}));var e,n,s,i}createRequest(t){return new Request(this.endpoint,{method:"POST",mode:"cors",headers:{"content-type":"application/json","api-key":this.api_key},body:JSON.stringify(t.map((t=>t.toClientEvent())))})}}("abc-xyz","http://localhost:3000").publish([a,h,p,l])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,