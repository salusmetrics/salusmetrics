(()=>{"use strict";var e={};let t;e.m={},e.u=e=>e+".bundle.js",e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),e.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var r=e.g.document;if(!t&&r&&(r.currentScript&&"SCRIPT"===r.currentScript.tagName.toUpperCase()&&(t=r.currentScript.src),!t)){var s=r.getElementsByTagName("script");if(s.length)for(var i=s.length-1;i>-1&&(!t||!/^http(s?):/.test(t));)t=s[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href;const r=new Uint8Array(16);function s(){if(!t){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");t=crypto.getRandomValues.bind(crypto)}return t(r)}const i=[];for(let e=0;e<256;++e)i.push((e+256).toString(16).slice(1));const n={};function o(e,t,r,s,i=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(s){if(i<0||i+16>s.length)throw new RangeError(`UUID byte range ${i}:${i+15} is out of buffer bounds`)}else s=new Uint8Array(16),i=0;return t??=Date.now(),r??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],s[i++]=t/1099511627776&255,s[i++]=t/4294967296&255,s[i++]=t/16777216&255,s[i++]=t/65536&255,s[i++]=t/256&255,s[i++]=255&t,s[i++]=112|r>>>28&15,s[i++]=r>>>20&255,s[i++]=128|r>>>14&63,s[i++]=r>>>6&255,s[i++]=r<<2&255|3&e[10],s[i++]=e[11],s[i++]=e[12],s[i++]=e[13],s[i++]=e[14],s[i++]=e[15],s}const u=function(e,t,r){let u;if(e)u=o(e.random??e.rng?.()??s(),e.msecs,e.seq,t,r);else{const e=Date.now(),i=s();!function(e,t,r){e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=r[6]<<23|r[7]<<16|r[8]<<8|r[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++)}(n,e,i),u=o(i,n.msecs,n.seq,t,r)}return t?u:function(e,t=0){return(i[e[t+0]]+i[e[t+1]]+i[e[t+2]]+i[e[t+3]]+"-"+i[e[t+4]]+i[e[t+5]]+"-"+i[e[t+6]]+i[e[t+7]]+"-"+i[e[t+8]]+i[e[t+9]]+"-"+i[e[t+10]]+i[e[t+11]]+i[e[t+12]]+i[e[t+13]]+i[e[t+14]]+i[e[t+15]]).toLowerCase()}(u)};var l,a,h,c;!function(e){e[e.Visitor=1]="Visitor",e[e.Session=2]="Session",e[e.Section=3]="Section",e[e.Click=4]="Click"}(l||(l={})),function(e){e[e.BadRequest=0]="BadRequest",e[e.ConfigurationError=1]="ConfigurationError",e[e.InternalServerError=2]="InternalServerError",e[e.Timeout=3]="Timeout"}(a||(a={})),function(e){e[e.Invalid=0]="Invalid",e[e.InvalidApiKey=1]="InvalidApiKey",e[e.InvalidHost=2]="InvalidHost",e[e.Success=3]="Success"}(h||(h={})),function(e){e[e.ConfigureRequest=0]="ConfigureRequest",e[e.ConfigureResult=1]="ConfigureResult",e[e.PublishError=2]="PublishError",e[e.PublishRequest=3]="PublishRequest",e[e.PublishResult=4]="PublishResult"}(c||(c={}));let g=new class{constructor(){this.event_type=l.Visitor,this.id=u()}toPublishEvent(){return{t:this.event_type,i:this.id,a:void 0}}};new class{constructor(t,r){if(this.errorHandler=r,this.configurationState=void 0,function(e){if(e.api_key.trim().length<1)return h.InvalidApiKey;const t=URL.parse(e.host);return null==t||t.pathname.length>1||t.search.length>0||t.hash.length>0?h.InvalidHost:h.Success}(t)!=h.Success)throw null!=this.errorHandler&&this.errorHandler("Error constructing WorkerPublisherGateway - Invalid Configuration"),new Error("Invalid Event Publisher Configuration");this.promiseRegistry={},this.workerPublisher=new Worker(new URL(e.p+e.u(552),e.b)),this.workerPublisher.addEventListener("message",(e=>this.routeMessage(e))),this.workerPublisher.addEventListener("error",(e=>{null!=this.errorHandler&&this.errorHandler(e.message)})),this.postConfigRequest(t)}publish(e){const t=this.createPublishMessage(e);return new Promise(((e,r)=>{this.registerPublishPromise(t,{resolve:e,reject:r}),this.postPublishRequest(t)}))}routeMessage(e){const t=e.data;t.messageType==c.ConfigureResult?(this.configurationState=t.configurationState,this.configurationState!=h.Success&&null!=this.errorHandler&&this.errorHandler("Worker event publisher failed")):this.resolvePublish(t)}resolvePublish(e){const t=this.promiseRegistry[e.id];if(null==t){if(null!=this.errorHandler)return void this.errorHandler("Event Publish Result had no matching handlers in registry")}else e.messageType==c.PublishResult?t.resolve(e.result):t.reject(e.errorMessage),delete this.promiseRegistry[e.id]}createPublishMessage(e){return{id:u(),messageType:c.PublishRequest,events:e}}registerPublishPromise(e,t){this.promiseRegistry[e.id]=t}postPublishRequest(e){this.workerPublisher.postMessage(e)}postConfigRequest(e){const t={config:e,id:u(),messageType:c.ConfigureRequest};this.workerPublisher.postMessage(t)}}({api_key:"abc-xyz",host:"http://localhost:3000"},(e=>console.log(e))).publish([g.toPublishEvent()])})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,