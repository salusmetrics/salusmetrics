(()=>{"use strict";const t=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i,e=function(e){return"string"==typeof e&&t.test(e)};let i;const s=new Uint8Array(16);function r(){if(!i){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");i=crypto.getRandomValues.bind(crypto)}return i(s)}const n=[];for(let t=0;t<256;++t)n.push((t+256).toString(16).slice(1));const o={};function c(t,e,i,s,r=0){if(t.length<16)throw new Error("Random bytes length must be >= 16");if(s){if(r<0||r+16>s.length)throw new RangeError(`UUID byte range ${r}:${r+15} is out of buffer bounds`)}else s=new Uint8Array(16),r=0;return e??=Date.now(),i??=127*t[6]<<24|t[7]<<16|t[8]<<8|t[9],s[r++]=e/1099511627776&255,s[r++]=e/4294967296&255,s[r++]=e/16777216&255,s[r++]=e/65536&255,s[r++]=e/256&255,s[r++]=255&e,s[r++]=112|i>>>28&15,s[r++]=i>>>20&255,s[r++]=128|i>>>14&63,s[r++]=i>>>6&255,s[r++]=i<<2&255|3&t[10],s[r++]=t[11],s[r++]=t[12],s[r++]=t[13],s[r++]=t[14],s[r++]=t[15],s}const a=function(t,e,i){let s;if(t)s=c(t.random??t.rng?.()??r(),t.msecs,t.seq,e,i);else{const t=Date.now(),n=r();!function(t,e,i){t.msecs??=-1/0,t.seq??=0,e>t.msecs?(t.seq=i[6]<<23|i[7]<<16|i[8]<<8|i[9],t.msecs=e):(t.seq=t.seq+1|0,0===t.seq&&t.msecs++)}(o,t,n),s=c(n,o.msecs,o.seq,e,i)}return e?s:function(t,e=0){return(n[t[e+0]]+n[t[e+1]]+n[t[e+2]]+n[t[e+3]]+"-"+n[t[e+4]]+n[t[e+5]]+"-"+n[t[e+6]]+n[t[e+7]]+"-"+n[t[e+8]]+n[t[e+9]]+"-"+n[t[e+10]]+n[t[e+11]]+n[t[e+12]]+n[t[e+13]]+n[t[e+14]]+n[t[e+15]]).toLowerCase()}(s)};var u,h,f,l;function S(t){return!(void 0===t||"number"!=typeof t.event_type||"string"!=typeof t.id||!e(t.id)||7!=function(t){if(!e(t))throw TypeError("Invalid UUID");return parseInt(t.slice(14,15),16)}(t.id))}!function(t){t[t.Visitor=1]="Visitor",t[t.Session=2]="Session",t[t.Section=3]="Section",t[t.Click=4]="Click"}(u||(u={}));class d{constructor(){this.event_type=u.Visitor,this.id=a()}toPublishEvent(){return{t:this.event_type,i:this.id,a:void 0}}}class p{constructor(t){this.event_type=u.Session,this.id=a(),this.parent=t}toPublishEvent(){const t={parent:this.parent.id};return{t:this.event_type,i:this.id,a:t}}}class v{constructor(t){this.event_type=u.Section,this.id=a(),this.parent=t}toPublishEvent(){const t={parent:this.parent.id};return{t:this.event_type,i:this.id,a:t}}}class y{constructor(t){this.event_type=u.Click,this.id=a(),this.parent=t}toPublishEvent(){const t={parent:this.parent.id};return{t:this.event_type,i:this.id,a:t}}}function g(t){return"number"==typeof t}!function(t){t[t.BadRequestError=0]="BadRequestError",t[t.ConfigurationError=1]="ConfigurationError",t[t.InternalError=2]="InternalError"}(h||(h={})),function(t){t[t.InternalError=0]="InternalError",t[t.MalformedData=1]="MalformedData",t[t.NotFound=2]="NotFound"}(f||(f={})),function(t){t[t.BadRequest=0]="BadRequest",t[t.InternalServerError=1]="InternalServerError",t[t.Timeout=2]="Timeout"}(l||(l={}));const m="SALUS",R="VISITOR",w="SESSION";let E="abc-xyz",_=new class{constructor(t){if(t.trim().length<1)throw new TypeError("invalid empty api_key");this.api_key=t,this.section=void 0}clearSiteState(){return this.clearSection(),this.clearSession(),this.clearVisitor(),{visitor:void 0,session:void 0,section:void 0}}getSiteState(){const t=this.getVisitor();let e;if("number"==typeof t)return t;e=t;const i=this.getSession();let s;if("number"==typeof i)return i==f.MalformedData||i==f.InternalError?i:{visitor:e,session:void 0,section:void 0};s=i;const r=this.getSection();let n;if("number"==typeof r){if(r==f.MalformedData||r==f.InternalError)return r}else n=r;return{visitor:e,session:s,section:n}}setSiteState(t){const e=t.section;if(void 0===e)this.clearSection();else{const t=this.setSection(e);if(!S(t))return t}const i=t.session;if(void 0===i)this.clearSession();else{const t=this.setSession(i);if(!S(t))return t}const s=t.visitor;if(void 0===s)this.clearVisitor();else{const t=this.setVisitor(s);if(!S(t))return t}return t}getVisitor(){const t=[m,R,this.api_key].join("_"),e=localStorage.getItem(t);if(null==e)return f.NotFound;const i={id:e,event_type:u.Visitor};return S(i)?i:f.MalformedData}setVisitor(t){const e=[m,R,this.api_key].join("_");try{localStorage.setItem(e,t.id)}catch(t){return f.InternalError}return t}clearVisitor(){const t=[m,R,this.api_key].join("_");localStorage.removeItem(t)}getSession(){const t=[m,w,this.api_key].join("_"),e=sessionStorage.getItem(t);if(null==e)return f.NotFound;const i={id:e,event_type:u.Session};return S(i)?i:f.MalformedData}setSession(t){const e=[m,w,this.api_key].join("_");try{sessionStorage.setItem(e,t.id)}catch(t){return f.InternalError}return t}clearSession(){const t=[m,w,this.api_key].join("_");localStorage.removeItem(t)}getSection(){return null==this.section?f.NotFound:this.section}setSection(t){return this.section=t,this.section}clearSection(){this.section=void 0}}(E),I=new class{constructor(t,e){this.api_key=t,this.endpoint=e+"/multi"}publish(t){return e=this,i=void 0,r=function*(){const e=yield fetch(this.createRequest(t));return e.ok?{count:t.length}:500==e.status?l.InternalServerError:400==e.status?l.BadRequest:l.Timeout},new((s=void 0)||(s=Promise))((function(t,n){function o(t){try{a(r.next(t))}catch(t){n(t)}}function c(t){try{a(r.throw(t))}catch(t){n(t)}}function a(e){var i;e.done?t(e.value):(i=e.value,i instanceof s?i:new s((function(t){t(i)}))).then(o,c)}a((r=r.apply(e,i||[])).next())}));var e,i,s,r}createRequest(t){return new Request(this.endpoint,{method:"POST",mode:"cors",headers:{"content-type":"application/json","api-key":this.api_key},priority:"low",keepalive:!0,body:JSON.stringify(t.map((t=>t.toPublishEvent())))})}}(E,"http://localhost:3000"),V=new class{constructor(t,e){this.publisher=t,this.siteStateRepository=e,this.eventQueue=[],this.siteStateWriteBuffer=void 0}getSiteState(){if(null!=this.siteStateWriteBuffer)return this.siteStateWriteBuffer;const t=this.siteStateRepository.getSiteState();return g(t)?this.siteStateWriteBuffer={visitor:void 0,session:void 0,section:void 0}:this.siteStateWriteBuffer=t,this.siteStateWriteBuffer}writeSiteState(){let t;return t=null!=this.siteStateWriteBuffer?this.siteStateRepository.setSiteState(this.siteStateWriteBuffer):this.siteStateRepository.clearSiteState(),this.siteStateWriteBuffer=void 0,t}setVisitorReference(t){this.siteStateWriteBuffer={visitor:t,session:void 0,section:void 0}}setSessionReference(t){this.siteStateWriteBuffer={visitor:this.getSiteState().visitor,session:t,section:void 0}}setSectionReference(t){this.siteStateWriteBuffer={visitor:this.getSiteState().visitor,session:this.getSiteState().session,section:t}}flush(){if(g(this.writeSiteState()))return h.InternalError;this.publisher.publish(this.eventQueue),this.eventQueue=[]}registerVisitor(){return this.createVisitor(),this.flush()}deregisterVisitor(){return this.setVisitorReference(void 0),this.flush()}createVisitor(){const t=new d;return this.setVisitorReference(t),this.eventQueue.push(t),t}getOrCreateVisitorReference(){const t=this.getSiteState().visitor;return null!=t?t:this.createVisitor()}registerSession(){return this.createSession(),this.flush()}deregisterSession(){return this.setSessionReference(void 0),this.flush()}createSession(){const t=this.getOrCreateVisitorReference(),e=new p(t);return this.setSessionReference(e),this.eventQueue.push(e),e}getOrCreateSessionReference(){const t=this.getSiteState().session;return null!=t?t:this.createSession()}registerSection(){return this.createSection(),this.flush()}deregisterSection(){return this.setSectionReference(void 0),this.flush()}createSection(){const t=this.getOrCreateSessionReference(),e=new v(t);return this.setSectionReference(e),this.eventQueue.push(e),e}getOrCreateSectionReference(){const t=this.getSiteState().section;return null!=t?t:this.createSection()}registerClick(){return this.createClick(),this.flush()}createClick(){const t=this.getOrCreateSectionReference(),e=new y(t);return this.eventQueue.push(e),e}}(I,_);V.registerSection()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,