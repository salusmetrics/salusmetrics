(()=>{"use strict";var e={};let r;e.m={},e.u=e=>e+".bundle.js",e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),e.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var r;e.g.importScripts&&(r=e.g.location+"");var t=e.g.document;if(!r&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(r=t.currentScript.src),!r)){var s=t.getElementsByTagName("script");if(s.length)for(var i=s.length-1;i>-1&&(!r||!/^http(s?):/.test(r));)r=s[i--].src}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=r})(),e.b=document.baseURI||self.location.href;const t=new Uint8Array(16);function s(){if(!r){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");r=crypto.getRandomValues.bind(crypto)}return r(t)}const i=[];for(let e=0;e<256;++e)i.push((e+256).toString(16).slice(1));const o={};function n(e,r,t,s,i=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(s){if(i<0||i+16>s.length)throw new RangeError(`UUID byte range ${i}:${i+15} is out of buffer bounds`)}else s=new Uint8Array(16),i=0;return r??=Date.now(),t??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],s[i++]=r/1099511627776&255,s[i++]=r/4294967296&255,s[i++]=r/16777216&255,s[i++]=r/65536&255,s[i++]=r/256&255,s[i++]=255&r,s[i++]=112|t>>>28&15,s[i++]=t>>>20&255,s[i++]=128|t>>>14&63,s[i++]=t>>>6&255,s[i++]=t<<2&255|3&e[10],s[i++]=e[11],s[i++]=e[12],s[i++]=e[13],s[i++]=e[14],s[i++]=e[15],s}const u=function(e,r,t){let u;if(e)u=n(e.random??e.rng?.()??s(),e.msecs,e.seq,r,t);else{const e=Date.now(),i=s();!function(e,r,t){e.msecs??=-1/0,e.seq??=0,r>e.msecs?(e.seq=t[6]<<23|t[7]<<16|t[8]<<8|t[9],e.msecs=r):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++)}(o,e,i),u=n(i,o.msecs,o.seq,r,t)}return r?u:function(e,r=0){return(i[e[r+0]]+i[e[r+1]]+i[e[r+2]]+i[e[r+3]]+"-"+i[e[r+4]]+i[e[r+5]]+"-"+i[e[r+6]]+i[e[r+7]]+"-"+i[e[r+8]]+i[e[r+9]]+"-"+i[e[r+10]]+i[e[r+11]]+i[e[r+12]]+i[e[r+13]]+i[e[r+14]]+i[e[r+15]]).toLowerCase()}(u)};var l,a,c,h;!function(e){e[e.Visitor=1]="Visitor",e[e.Session=2]="Session",e[e.Section=3]="Section",e[e.Click=4]="Click"}(l||(l={})),function(e){e[e.BadRequest=0]="BadRequest",e[e.ConfigurationError=1]="ConfigurationError",e[e.FetchError=2]="FetchError",e[e.InternalServerError=3]="InternalServerError",e[e.Timeout=4]="Timeout"}(a||(a={})),function(e){e[e.Invalid=0]="Invalid",e[e.InvalidApiKey=1]="InvalidApiKey",e[e.InvalidHost=2]="InvalidHost",e[e.Success=3]="Success"}(c||(c={})),function(e){e[e.ConfigureRequest=0]="ConfigureRequest",e[e.ConfigureResult=1]="ConfigureResult",e[e.PublishError=2]="PublishError",e[e.PublishRequest=3]="PublishRequest",e[e.PublishResult=4]="PublishResult"}(h||(h={}));let g=new class{constructor(){this.event_type=l.Visitor,this.id=u()}toPublishEvent(){return{t:this.event_type,i:this.id,a:void 0}}};new class{constructor(r,t){if(this.errorHandler=t,this.configurationState=void 0,function(e){if(e.api_key.trim().length<1)return c.InvalidApiKey;const r=URL.parse(e.host);return null==r||r.pathname.length>1||r.search.length>0||r.hash.length>0?c.InvalidHost:c.Success}(r)!=c.Success)throw null!=this.errorHandler&&this.errorHandler("Error constructing WorkerPublisherGateway - Invalid Configuration"),new Error("Invalid Event Publisher Configuration");this.promiseRegistry={},this.workerPublisher=new Worker(new URL(e.p+e.u(552),e.b)),this.workerPublisher.addEventListener("message",(e=>this.routeMessage(e))),this.workerPublisher.addEventListener("error",(e=>{null!=this.errorHandler&&this.errorHandler(e.message)})),this.postConfigRequest(r)}publish(e){const r=this.createPublishMessage(e);return new Promise(((e,t)=>{this.registerPublishPromise(r,{resolve:e,reject:t}),this.postPublishRequest(r)}))}routeMessage(e){const r=e.data;r.messageType==h.ConfigureResult?(this.configurationState=r.configurationState,this.configurationState!=c.Success&&null!=this.errorHandler&&this.errorHandler("Worker event publisher failed")):this.resolvePublish(r)}resolvePublish(e){const r=this.promiseRegistry[e.id];if(null==r){if(null!=this.errorHandler)return void this.errorHandler("Event Publish Result had no matching handlers in registry")}else e.messageType==h.PublishResult?r.resolve(e.result):r.reject(e.errorMessage),delete this.promiseRegistry[e.id]}createPublishMessage(e){return{id:u(),messageType:h.PublishRequest,events:e}}registerPublishPromise(e,r){this.promiseRegistry[e.id]=r}postPublishRequest(e){this.workerPublisher.postMessage(e)}postConfigRequest(e){const r={config:e,id:u(),messageType:h.ConfigureRequest};this.workerPublisher.postMessage(r)}}({api_key:"abc-xyz",host:"http://localhost:3000"},(e=>console.log(e))).publish([g.toPublishEvent()]).then((e=>console.log("success:",e))).catch((e=>console.error("error:",e)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Y3hDLElBQ3BELEdBQWdCSSxNQUFacUMsR0FDRixHQUF5QnJDLE1BQXJCdEUsS0FBS3dFLGFBSVAsWUFIQXhFLEtBQUt3RSxhQUNILGtFQUtBa0MsRUFBY0gsYUFBZTFDLEVBQWtCK0MsY0FDakRELEVBQVNWLFFBQVFTLEVBQWNHLFFBRS9CRixFQUFTVCxPQUFPUSxFQUFjSSxxQkFFekI5RyxLQUFLc0YsZ0JBQWdCb0IsRUFBY3hDLEdBRTlDLENBRVEsb0JBQUE2QixDQUNORCxHQUdBLE1BQU8sQ0FDTDVCLEdBRlMsSUFHVHFDLFlBQWExQyxFQUFrQmtELGVBQy9CakIsT0FBUUEsRUFFWixDQUVRLHNCQUFBSyxDQUNOUixFQUNBZ0IsR0FFQTNHLEtBQUtzRixnQkFBZ0JLLEVBQVF6QixJQUFNeUMsQ0FDckMsQ0FFUSxrQkFBQVAsQ0FDTlksR0FFQWhILEtBQUt1RixnQkFBZ0IwQixZQUFZRCxFQUNuQyxDQUVRLGlCQUFBcEIsQ0FBa0JyQixHQUN4QixNQUFNMkMsRUFBbUQsQ0FDdkQzQyxTQUNBTCxHQUFJLElBQ0pxQyxZQUFhMUMsRUFBa0JzRCxrQkFFakNuSCxLQUFLdUYsZ0JBQWdCMEIsWUFBWUMsRUFDbkMsR0QvSHVDLENBQUV4QyxRQWQ3QixVQWNzQ0csS0FiekMsMEJBYWtEM0UsR0FDM0RrSCxRQUFRQyxJQUFJbkgsS0FJWDJGLFFBQVEsQ0FBQy9CLEVBQVFLLG1CQUNqQm1ELE1BQU1wSCxHQUFNa0gsUUFBUUMsSUFBSSxXQUFZbkgsS0FDcENxSCxPQUFPckgsR0FBTWtILFFBQVFJLE1BQU0sU0FBVXRILEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbmdlc3QtY2xpZW50L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2luZ2VzdC1jbGllbnQvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIndlYnBhY2s6Ly9pbmdlc3QtY2xpZW50L3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9pbmdlc3QtY2xpZW50L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vaW5nZXN0LWNsaWVudC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2luZ2VzdC1jbGllbnQvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vaW5nZXN0LWNsaWVudC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9pbmdlc3QtY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vaW5nZXN0LWNsaWVudC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjcuanMiLCJ3ZWJwYWNrOi8vaW5nZXN0LWNsaWVudC8uL3NyYy9FdmVudC9FdmVudC50cyIsIndlYnBhY2s6Ly9pbmdlc3QtY2xpZW50Ly4vc3JjL0V2ZW50UHVibGlzaGVyL0V2ZW50UHVibGlzaGVyLnRzIiwid2VicGFjazovL2luZ2VzdC1jbGllbnQvLi9zcmMvRXZlbnRQdWJsaXNoZXIvV29ya2VyTWVzc2FnZS50cyIsIndlYnBhY2s6Ly9pbmdlc3QtY2xpZW50Ly4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL2luZ2VzdC1jbGllbnQvLi9zcmMvRXZlbnRQdWJsaXNoZXIvV29ya2VyUHVibGlzaGVyR2F0ZXdheS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsImxldCBnZXRSYW5kb21WYWx1ZXM7XG5jb25zdCBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICBpZiAodHlwZW9mIGNyeXB0byA9PT0gJ3VuZGVmaW5lZCcgfHwgIWNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBnZXRSYW5kb21WYWx1ZXMgPSBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59XG4iLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJylcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0NzkyOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuY29uc3QgYnl0ZVRvSGV4ID0gW107XG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnNsaWNlKDEpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gICAgcmV0dXJuIChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIsIG9mZnNldCA9IDApIHtcbiAgICBjb25zdCB1dWlkID0gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0KTtcbiAgICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIHJldHVybiB1dWlkO1xufVxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5O1xuIiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5jb25zdCBfc3RhdGUgPSB7fTtcbmZ1bmN0aW9uIHY3KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgbGV0IGJ5dGVzO1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGJ5dGVzID0gdjdCeXRlcyhvcHRpb25zLnJhbmRvbSA/PyBvcHRpb25zLnJuZz8uKCkgPz8gcm5nKCksIG9wdGlvbnMubXNlY3MsIG9wdGlvbnMuc2VxLCBidWYsIG9mZnNldCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCBybmRzID0gcm5nKCk7XG4gICAgICAgIHVwZGF0ZVY3U3RhdGUoX3N0YXRlLCBub3csIHJuZHMpO1xuICAgICAgICBieXRlcyA9IHY3Qnl0ZXMocm5kcywgX3N0YXRlLm1zZWNzLCBfc3RhdGUuc2VxLCBidWYsIG9mZnNldCk7XG4gICAgfVxuICAgIHJldHVybiBidWYgPyBieXRlcyA6IHVuc2FmZVN0cmluZ2lmeShieXRlcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVjdTdGF0ZShzdGF0ZSwgbm93LCBybmRzKSB7XG4gICAgc3RhdGUubXNlY3MgPz89IC1JbmZpbml0eTtcbiAgICBzdGF0ZS5zZXEgPz89IDA7XG4gICAgaWYgKG5vdyA+IHN0YXRlLm1zZWNzKSB7XG4gICAgICAgIHN0YXRlLnNlcSA9IChybmRzWzZdIDw8IDIzKSB8IChybmRzWzddIDw8IDE2KSB8IChybmRzWzhdIDw8IDgpIHwgcm5kc1s5XTtcbiAgICAgICAgc3RhdGUubXNlY3MgPSBub3c7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdGF0ZS5zZXEgPSAoc3RhdGUuc2VxICsgMSkgfCAwO1xuICAgICAgICBpZiAoc3RhdGUuc2VxID09PSAwKSB7XG4gICAgICAgICAgICBzdGF0ZS5tc2VjcysrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIHY3Qnl0ZXMocm5kcywgbXNlY3MsIHNlcSwgYnVmLCBvZmZzZXQgPSAwKSB7XG4gICAgaWYgKHJuZHMubGVuZ3RoIDwgMTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSYW5kb20gYnl0ZXMgbGVuZ3RoIG11c3QgYmUgPj0gMTYnKTtcbiAgICB9XG4gICAgaWYgKCFidWYpIHtcbiAgICAgICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMTYgPiBidWYubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVVVJRCBieXRlIHJhbmdlICR7b2Zmc2V0fToke29mZnNldCArIDE1fSBpcyBvdXQgb2YgYnVmZmVyIGJvdW5kc2ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1zZWNzID8/PSBEYXRlLm5vdygpO1xuICAgIHNlcSA/Pz0gKChybmRzWzZdICogMHg3ZikgPDwgMjQpIHwgKHJuZHNbN10gPDwgMTYpIHwgKHJuZHNbOF0gPDwgOCkgfCBybmRzWzldO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAobXNlY3MgLyAweDEwMDAwMDAwMDAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwMDAwMDAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwMDAwMCkgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAobXNlY3MgLyAweDEwMDAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IChtc2VjcyAvIDB4MTAwKSAmIDB4ZmY7XG4gICAgYnVmW29mZnNldCsrXSA9IG1zZWNzICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gMHg3MCB8ICgoc2VxID4+PiAyOCkgJiAweDBmKTtcbiAgICBidWZbb2Zmc2V0KytdID0gKHNlcSA+Pj4gMjApICYgMHhmZjtcbiAgICBidWZbb2Zmc2V0KytdID0gMHg4MCB8ICgoc2VxID4+PiAxNCkgJiAweDNmKTtcbiAgICBidWZbb2Zmc2V0KytdID0gKHNlcSA+Pj4gNikgJiAweGZmO1xuICAgIGJ1ZltvZmZzZXQrK10gPSAoKHNlcSA8PCAyKSAmIDB4ZmYpIHwgKHJuZHNbMTBdICYgMHgwMyk7XG4gICAgYnVmW29mZnNldCsrXSA9IHJuZHNbMTFdO1xuICAgIGJ1ZltvZmZzZXQrK10gPSBybmRzWzEyXTtcbiAgICBidWZbb2Zmc2V0KytdID0gcm5kc1sxM107XG4gICAgYnVmW29mZnNldCsrXSA9IHJuZHNbMTRdO1xuICAgIGJ1ZltvZmZzZXQrK10gPSBybmRzWzE1XTtcbiAgICByZXR1cm4gYnVmO1xufVxuZXhwb3J0IGRlZmF1bHQgdjc7XG4iLCJpbXBvcnQgeyBQdWJsaXNoRXZlbnQgfSBmcm9tIFwiLi4vRXZlbnRQdWJsaXNoZXIvUHVibGlzaEV2ZW50XCI7XG5pbXBvcnQge1xuICB2NyBhcyB1dWlkdjcsXG4gIHZhbGlkYXRlIGFzIHV1aWRWYWxpZGF0ZSxcbiAgdmVyc2lvbiBhcyB1dWlkVmVyc2lvbixcbn0gZnJvbSBcInV1aWRcIjtcblxuZXhwb3J0IGNvbnN0IGVudW0gRXZlbnRUeXBlIHtcbiAgVmlzaXRvciA9IDEsXG4gIFNlc3Npb24gPSAyLFxuICBTZWN0aW9uID0gMyxcbiAgQ2xpY2sgPSA0LFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50UmVmZXJlbmNlIHtcbiAgcmVhZG9ubHkgZXZlbnRfdHlwZTogRXZlbnRUeXBlO1xuICByZWFkb25seSBpZDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFdmVudFJlZmVyZW5jZSh2YWx1ZTogYW55KTogdmFsdWUgaXMgRXZlbnRSZWZlcmVuY2Uge1xuICByZXR1cm4gIShcbiAgICB0eXBlb2YgdmFsdWUgPT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgIHR5cGVvZiB2YWx1ZS5ldmVudF90eXBlICE9IFwibnVtYmVyXCIgfHxcbiAgICB0eXBlb2YgdmFsdWUuaWQgIT0gXCJzdHJpbmdcIiB8fFxuICAgICF1dWlkVmFsaWRhdGUodmFsdWUuaWQpIHx8XG4gICAgdXVpZFZlcnNpb24odmFsdWUuaWQpICE9IDdcbiAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFdmVudCBleHRlbmRzIEV2ZW50UmVmZXJlbmNlIHtcbiAgdG9QdWJsaXNoRXZlbnQoKTogUHVibGlzaEV2ZW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZpc2l0b3JFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgZXZlbnRfdHlwZTogRXZlbnRUeXBlLlZpc2l0b3I7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlzaXRvclJlZmVyZW5jZSBleHRlbmRzIEV2ZW50UmVmZXJlbmNlIHtcbiAgZXZlbnRfdHlwZTogRXZlbnRUeXBlLlZpc2l0b3I7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvbkV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICBwYXJlbnQ6IFZpc2l0b3JSZWZlcmVuY2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvblJlZmVyZW5jZSBleHRlbmRzIEV2ZW50UmVmZXJlbmNlIHtcbiAgZXZlbnRfdHlwZTogRXZlbnRUeXBlLlNlc3Npb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VjdGlvbkV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICBldmVudF90eXBlOiBFdmVudFR5cGUuU2VjdGlvbjtcbiAgcGFyZW50OiBTZXNzaW9uUmVmZXJlbmNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlY3Rpb25SZWZlcmVuY2UgZXh0ZW5kcyBFdmVudFJlZmVyZW5jZSB7XG4gIGV2ZW50X3R5cGU6IEV2ZW50VHlwZS5TZWN0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsaWNrRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIGV2ZW50X3R5cGU6IEV2ZW50VHlwZS5DbGljaztcbiAgcGFyZW50OiBTZWN0aW9uUmVmZXJlbmNlO1xufVxuXG5leHBvcnQgY2xhc3MgVmlzaXRvciBpbXBsZW1lbnRzIFZpc2l0b3JFdmVudCwgVmlzaXRvclJlZmVyZW5jZSB7XG4gIHJlYWRvbmx5IGV2ZW50X3R5cGU6IEV2ZW50VHlwZS5WaXNpdG9yO1xuICByZWFkb25seSBpZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZXZlbnRfdHlwZSA9IEV2ZW50VHlwZS5WaXNpdG9yO1xuICAgIHRoaXMuaWQgPSB1dWlkdjcoKTtcbiAgfVxuXG4gIHRvUHVibGlzaEV2ZW50KCk6IFB1Ymxpc2hFdmVudCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHQ6IHRoaXMuZXZlbnRfdHlwZSxcbiAgICAgIGk6IHRoaXMuaWQsXG4gICAgICBhOiB1bmRlZmluZWQsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2Vzc2lvbiBpbXBsZW1lbnRzIFNlc3Npb25FdmVudCwgU2Vzc2lvblJlZmVyZW5jZSB7XG4gIHJlYWRvbmx5IGV2ZW50X3R5cGU6IEV2ZW50VHlwZS5TZXNzaW9uO1xuICByZWFkb25seSBpZDogc3RyaW5nO1xuICByZWFkb25seSBwYXJlbnQ6IFZpc2l0b3JSZWZlcmVuY2U7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBWaXNpdG9yUmVmZXJlbmNlKSB7XG4gICAgdGhpcy5ldmVudF90eXBlID0gRXZlbnRUeXBlLlNlc3Npb247XG4gICAgdGhpcy5pZCA9IHV1aWR2NygpO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB9XG5cbiAgdG9QdWJsaXNoRXZlbnQoKTogUHVibGlzaEV2ZW50IHtcbiAgICBjb25zdCBhdHRyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHsgcGFyZW50OiB0aGlzLnBhcmVudC5pZCB9O1xuICAgIHJldHVybiB7XG4gICAgICB0OiB0aGlzLmV2ZW50X3R5cGUsXG4gICAgICBpOiB0aGlzLmlkLFxuICAgICAgYTogYXR0cnMsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2VjdGlvbiBpbXBsZW1lbnRzIFNlY3Rpb25FdmVudCwgU2VjdGlvblJlZmVyZW5jZSB7XG4gIHJlYWRvbmx5IGV2ZW50X3R5cGU6IEV2ZW50VHlwZS5TZWN0aW9uO1xuICByZWFkb25seSBpZDogc3RyaW5nO1xuICByZWFkb25seSBwYXJlbnQ6IFNlc3Npb25SZWZlcmVuY2U7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBTZXNzaW9uUmVmZXJlbmNlKSB7XG4gICAgdGhpcy5ldmVudF90eXBlID0gRXZlbnRUeXBlLlNlY3Rpb247XG4gICAgdGhpcy5pZCA9IHV1aWR2NygpO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB9XG5cbiAgdG9QdWJsaXNoRXZlbnQoKTogUHVibGlzaEV2ZW50IHtcbiAgICBjb25zdCBhdHRyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHsgcGFyZW50OiB0aGlzLnBhcmVudC5pZCB9O1xuICAgIHJldHVybiB7XG4gICAgICB0OiB0aGlzLmV2ZW50X3R5cGUsXG4gICAgICBpOiB0aGlzLmlkLFxuICAgICAgYTogYXR0cnMsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2xpY2sgaW1wbGVtZW50cyBDbGlja0V2ZW50IHtcbiAgcmVhZG9ubHkgZXZlbnRfdHlwZTogRXZlbnRUeXBlLkNsaWNrO1xuICByZWFkb25seSBpZDogc3RyaW5nO1xuICByZWFkb25seSBwYXJlbnQ6IFNlY3Rpb25SZWZlcmVuY2U7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBTZWN0aW9uUmVmZXJlbmNlKSB7XG4gICAgdGhpcy5ldmVudF90eXBlID0gRXZlbnRUeXBlLkNsaWNrO1xuICAgIHRoaXMuaWQgPSB1dWlkdjcoKTtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgfVxuXG4gIHRvUHVibGlzaEV2ZW50KCk6IFB1Ymxpc2hFdmVudCB7XG4gICAgY29uc3QgYXR0cnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7IHBhcmVudDogdGhpcy5wYXJlbnQuaWQgfTtcbiAgICByZXR1cm4ge1xuICAgICAgdDogdGhpcy5ldmVudF90eXBlLFxuICAgICAgaTogdGhpcy5pZCxcbiAgICAgIGE6IGF0dHJzLFxuICAgIH07XG4gIH1cbn1cbiIsImltcG9ydCB7IFB1Ymxpc2hFdmVudCB9IGZyb20gXCIuL1B1Ymxpc2hFdmVudFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50UHVibGlzaFN1Y2Nlc3Mge1xuICBjb3VudDogbnVtYmVyO1xufVxuXG5leHBvcnQgZW51bSBFdmVudFB1Ymxpc2hFcnJvciB7XG4gIEJhZFJlcXVlc3QsXG4gIENvbmZpZ3VyYXRpb25FcnJvcixcbiAgRmV0Y2hFcnJvcixcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcixcbiAgVGltZW91dCxcbn1cblxuZXhwb3J0IHR5cGUgRXZlbnRQdWJsaXNoUmVzdWx0ID0gRXZlbnRQdWJsaXNoU3VjY2VzcyB8IEV2ZW50UHVibGlzaEVycm9yO1xuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50UHVibGlzaGVyIHtcbiAgcHVibGlzaChldmVudHM6IFB1Ymxpc2hFdmVudFtdKTogUHJvbWlzZTxFdmVudFB1Ymxpc2hSZXN1bHQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50UHVibGlzaGVyQ29uZmlndXJhdGlvbiB7XG4gIGFwaV9rZXk6IHN0cmluZztcbiAgaG9zdDogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBFdmVudFB1Ymxpc2hlckNvbmZpZ3VyYXRpb25TdGF0ZSB7XG4gIEludmFsaWQsXG4gIEludmFsaWRBcGlLZXksXG4gIEludmFsaWRIb3N0LFxuICBTdWNjZXNzLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVFdmVudFB1Ymxpc2hlckNvbmZpZ3VyYXRpb24oXG4gIGNvbmZpZzogRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uLFxuKTogRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uU3RhdGUge1xuICBpZiAoY29uZmlnLmFwaV9rZXkudHJpbSgpLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm4gRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uU3RhdGUuSW52YWxpZEFwaUtleTtcbiAgfVxuICBjb25zdCBob3N0ID0gVVJMLnBhcnNlKGNvbmZpZy5ob3N0KTtcbiAgaWYgKGhvc3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBFdmVudFB1Ymxpc2hlckNvbmZpZ3VyYXRpb25TdGF0ZS5JbnZhbGlkSG9zdDtcbiAgfVxuICBpZiAoXG4gICAgaG9zdC5wYXRobmFtZS5sZW5ndGggPiAxIHx8XG4gICAgaG9zdC5zZWFyY2gubGVuZ3RoID4gMCB8fFxuICAgIGhvc3QuaGFzaC5sZW5ndGggPiAwXG4gICkge1xuICAgIHJldHVybiBFdmVudFB1Ymxpc2hlckNvbmZpZ3VyYXRpb25TdGF0ZS5JbnZhbGlkSG9zdDtcbiAgfVxuICByZXR1cm4gRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uU3RhdGUuU3VjY2Vzcztcbn1cbiIsImltcG9ydCB7XG4gIEV2ZW50UHVibGlzaGVyQ29uZmlndXJhdGlvbixcbiAgRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uU3RhdGUsXG4gIEV2ZW50UHVibGlzaEVycm9yLFxuICBFdmVudFB1Ymxpc2hSZXN1bHQsXG59IGZyb20gXCIuL0V2ZW50UHVibGlzaGVyXCI7XG5pbXBvcnQgeyBQdWJsaXNoRXZlbnQgfSBmcm9tIFwiLi9QdWJsaXNoRXZlbnRcIjtcblxuZXhwb3J0IGVudW0gV29ya2VyTWVzc2FnZVR5cGUge1xuICBDb25maWd1cmVSZXF1ZXN0LFxuICBDb25maWd1cmVSZXN1bHQsXG4gIFB1Ymxpc2hFcnJvcixcbiAgUHVibGlzaFJlcXVlc3QsXG4gIFB1Ymxpc2hSZXN1bHQsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV29ya2VyTWVzc2FnZSB7XG4gIGlkOiBzdHJpbmc7XG4gIG1lc3NhZ2VUeXBlOiBXb3JrZXJNZXNzYWdlVHlwZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXb3JrZXJDb25maWd1cmF0aW9uUmVxdWVzdE1lc3NhZ2UgZXh0ZW5kcyBXb3JrZXJNZXNzYWdlIHtcbiAgbWVzc2FnZVR5cGU6IFdvcmtlck1lc3NhZ2VUeXBlLkNvbmZpZ3VyZVJlcXVlc3Q7XG4gIGNvbmZpZzogRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdvcmtlckNvbmZpZ3VyYXRpb25SZXN1bHRNZXNzYWdlIGV4dGVuZHMgV29ya2VyTWVzc2FnZSB7XG4gIG1lc3NhZ2VUeXBlOiBXb3JrZXJNZXNzYWdlVHlwZS5Db25maWd1cmVSZXN1bHQ7XG4gIGNvbmZpZ3VyYXRpb25TdGF0ZTogRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uU3RhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV29ya2VyUHVibGlzaEVycm9yTWVzc2FnZSBleHRlbmRzIFdvcmtlck1lc3NhZ2Uge1xuICBtZXNzYWdlVHlwZTogV29ya2VyTWVzc2FnZVR5cGUuUHVibGlzaEVycm9yO1xuICBlcnJvclR5cGU6IEV2ZW50UHVibGlzaEVycm9yO1xuICBlcnJvck1lc3NhZ2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXb3JrZXJQdWJsaXNoUmVxdWVzdE1lc3NhZ2UgZXh0ZW5kcyBXb3JrZXJNZXNzYWdlIHtcbiAgbWVzc2FnZVR5cGU6IFdvcmtlck1lc3NhZ2VUeXBlLlB1Ymxpc2hSZXF1ZXN0O1xuICBldmVudHM6IFB1Ymxpc2hFdmVudFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdvcmtlclB1Ymxpc2hSZXN1bHRNZXNzYWdlIGV4dGVuZHMgV29ya2VyTWVzc2FnZSB7XG4gIG1lc3NhZ2VUeXBlOiBXb3JrZXJNZXNzYWdlVHlwZS5QdWJsaXNoUmVzdWx0O1xuICByZXN1bHQ6IEV2ZW50UHVibGlzaFJlc3VsdDtcbn1cbiIsImltcG9ydCB7IFZpc2l0b3IgfSBmcm9tIFwiLi9FdmVudC9FdmVudFwiO1xuLy8gaW1wb3J0IHsgRXZlbnRNYW5hZ2VyIH0gZnJvbSBcIi4vRXZlbnRNYW5hZ2VyL0V2ZW50TWFuYWdlclwiO1xuLy8gaW1wb3J0IHsgSHR0cEV2ZW50UHVibGlzaGVyIH0gZnJvbSBcIi4vRXZlbnRQdWJsaXNoZXIvSHR0cEV2ZW50UHVibGlzaGVyXCI7XG5pbXBvcnQgeyBXb3JrZXJQdWJsaXNoZXJHYXRld2F5IH0gZnJvbSBcIi4vRXZlbnRQdWJsaXNoZXIvV29ya2VyUHVibGlzaGVyR2F0ZXdheVwiO1xuLy8gaW1wb3J0IHsgV2ViU3RvcmFnZVNpdGVTdGF0ZVJlcG9zaXRvcnkgfSBmcm9tIFwiLi9TaXRlU3RhdGUvV2ViU3RvcmFnZVNpdGVTdGF0ZVJlcG9zaXRvcnlcIjtcblxubGV0IGFwaV9rZXkgPSBcImFiYy14eXpcIjtcbmxldCBob3N0ID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDBcIjtcblxuLy8gbGV0IHNpdGVTdGF0ZVJlcG9zaXRvcnkgPSBuZXcgV2ViU3RvcmFnZVNpdGVTdGF0ZVJlcG9zaXRvcnkoYXBpX2tleSk7XG4vLyBsZXQgcHVibGlzaGVyID0gbmV3IEh0dHBFdmVudFB1Ymxpc2hlcih7XG4vLyAgIGFwaV9rZXksXG4vLyAgIGhvc3Q6IFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCIsXG4vLyB9KTtcbi8vIGxldCBldmVudE1hbmFnZXIgPSBuZXcgRXZlbnRNYW5hZ2VyKHB1Ymxpc2hlciwgc2l0ZVN0YXRlUmVwb3NpdG9yeSk7XG5cbi8vIGV2ZW50TWFuYWdlci5yZWdpc3RlclNlY3Rpb24oKTtcblxubGV0IHZpc2l0b3I6IFZpc2l0b3IgPSBuZXcgVmlzaXRvcigpO1xuXG5sZXQgZ2F0ZXdheSA9IG5ldyBXb3JrZXJQdWJsaXNoZXJHYXRld2F5KHsgYXBpX2tleSwgaG9zdCB9LCAoZSkgPT5cbiAgY29uc29sZS5sb2coZSksXG4pO1xuXG5nYXRld2F5XG4gIC5wdWJsaXNoKFt2aXNpdG9yLnRvUHVibGlzaEV2ZW50KCldKVxuICAudGhlbigoZSkgPT4gY29uc29sZS5sb2coXCJzdWNjZXNzOlwiLCBlKSlcbiAgLmNhdGNoKChlKSA9PiBjb25zb2xlLmVycm9yKFwiZXJyb3I6XCIsIGUpKTtcbiIsImltcG9ydCB7XG4gIEV2ZW50UHVibGlzaGVyLFxuICBFdmVudFB1Ymxpc2hlckNvbmZpZ3VyYXRpb24sXG4gIEV2ZW50UHVibGlzaGVyQ29uZmlndXJhdGlvblN0YXRlLFxuICBFdmVudFB1Ymxpc2hSZXN1bHQsXG4gIHZhbGlkYXRlRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uLFxufSBmcm9tIFwiLi9FdmVudFB1Ymxpc2hlclwiO1xuaW1wb3J0IHsgUHVibGlzaEV2ZW50IH0gZnJvbSBcIi4vUHVibGlzaEV2ZW50XCI7XG5pbXBvcnQge1xuICBXb3JrZXJDb25maWd1cmF0aW9uUmVxdWVzdE1lc3NhZ2UsXG4gIFdvcmtlckNvbmZpZ3VyYXRpb25SZXN1bHRNZXNzYWdlLFxuICBXb3JrZXJNZXNzYWdlVHlwZSxcbiAgV29ya2VyUHVibGlzaEVycm9yTWVzc2FnZSxcbiAgV29ya2VyUHVibGlzaFJlcXVlc3RNZXNzYWdlLFxuICBXb3JrZXJQdWJsaXNoUmVzdWx0TWVzc2FnZSxcbn0gZnJvbSBcIi4vV29ya2VyTWVzc2FnZVwiO1xuaW1wb3J0IHsgdjcgYXMgdXVpZHY3IH0gZnJvbSBcInV1aWRcIjtcblxudHlwZSBSZXNvbHZlRXZlbnRQdWJsaXNoUmVzdWx0ID0gKFxuICB2YWx1ZTogRXZlbnRQdWJsaXNoUmVzdWx0IHwgUHJvbWlzZUxpa2U8RXZlbnRQdWJsaXNoUmVzdWx0PixcbikgPT4gdm9pZDtcbnR5cGUgUmVqZWN0RXZlbnRQdWJsaXNoUmVzdWx0ID0gKHJlYXNvbj86IGFueSkgPT4gdm9pZDtcblxuaW50ZXJmYWNlIFByb21pc2VIYW5kbGVycyB7XG4gIHJlc29sdmU6IFJlc29sdmVFdmVudFB1Ymxpc2hSZXN1bHQ7XG4gIHJlamVjdDogUmVqZWN0RXZlbnRQdWJsaXNoUmVzdWx0O1xufVxuXG5leHBvcnQgdHlwZSBHbG9iYWxQdWJsaXNoRXJyb3JIYW5kbGVyID0gKGVycj86IHN0cmluZykgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIFdvcmtlclB1Ymxpc2hlckdhdGV3YXkgaW1wbGVtZW50cyBFdmVudFB1Ymxpc2hlciB7XG4gIHByaXZhdGUgd29ya2VyUHVibGlzaGVyOiBXb3JrZXI7XG4gIHByaXZhdGUgcHJvbWlzZVJlZ2lzdHJ5OiBSZWNvcmQ8c3RyaW5nLCBQcm9taXNlSGFuZGxlcnM+O1xuICBwcml2YXRlIGNvbmZpZ3VyYXRpb25TdGF0ZTogRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uU3RhdGUgfCB1bmRlZmluZWQ7XG4gIHByaXZhdGUgZXJyb3JIYW5kbGVyOiBHbG9iYWxQdWJsaXNoRXJyb3JIYW5kbGVyIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbmZpZzogRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uLFxuICAgIGVycm9ySGFuZGxlcj86IEdsb2JhbFB1Ymxpc2hFcnJvckhhbmRsZXIsXG4gICkge1xuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gZXJyb3JIYW5kbGVyO1xuICAgIHRoaXMuY29uZmlndXJhdGlvblN0YXRlID0gdW5kZWZpbmVkO1xuICAgIGlmIChcbiAgICAgIHZhbGlkYXRlRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uKGNvbmZpZykgIT1cbiAgICAgIEV2ZW50UHVibGlzaGVyQ29uZmlndXJhdGlvblN0YXRlLlN1Y2Nlc3NcbiAgICApIHtcbiAgICAgIGlmICh0aGlzLmVycm9ySGFuZGxlciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIoXG4gICAgICAgICAgXCJFcnJvciBjb25zdHJ1Y3RpbmcgV29ya2VyUHVibGlzaGVyR2F0ZXdheSAtIEludmFsaWQgQ29uZmlndXJhdGlvblwiLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBFdmVudCBQdWJsaXNoZXIgQ29uZmlndXJhdGlvblwiKTtcbiAgICB9XG4gICAgdGhpcy5wcm9taXNlUmVnaXN0cnkgPSB7fTtcbiAgICB0aGlzLndvcmtlclB1Ymxpc2hlciA9IG5ldyBXb3JrZXIoXG4gICAgICBuZXcgVVJMKFwiV29ya2VyUHVibGlzaGVyLmpzXCIsIGltcG9ydC5tZXRhLnVybCksXG4gICAgKTtcbiAgICB0aGlzLndvcmtlclB1Ymxpc2hlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAobSkgPT5cbiAgICAgIHRoaXMucm91dGVNZXNzYWdlKG0pLFxuICAgICk7XG4gICAgdGhpcy53b3JrZXJQdWJsaXNoZXIuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIChlKSA9PiB7XG4gICAgICBpZiAodGhpcy5lcnJvckhhbmRsZXIgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyKGUubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5wb3N0Q29uZmlnUmVxdWVzdChjb25maWcpO1xuICB9XG5cbiAgcHVibGlzaChldmVudHM6IFB1Ymxpc2hFdmVudFtdKTogUHJvbWlzZTxFdmVudFB1Ymxpc2hSZXN1bHQ+IHtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5jcmVhdGVQdWJsaXNoTWVzc2FnZShldmVudHMpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxFdmVudFB1Ymxpc2hSZXN1bHQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucmVnaXN0ZXJQdWJsaXNoUHJvbWlzZShtZXNzYWdlLCB7IHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICAgIHRoaXMucG9zdFB1Ymxpc2hSZXF1ZXN0KG1lc3NhZ2UpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByb3V0ZU1lc3NhZ2UobWVzc2FnZTogTWVzc2FnZUV2ZW50KSB7XG4gICAgY29uc3Qgd29ya2VyTWVzc2FnZSA9IG1lc3NhZ2UuZGF0YSBhc1xuICAgICAgfCBXb3JrZXJDb25maWd1cmF0aW9uUmVzdWx0TWVzc2FnZVxuICAgICAgfCBXb3JrZXJQdWJsaXNoUmVzdWx0TWVzc2FnZVxuICAgICAgfCBXb3JrZXJQdWJsaXNoRXJyb3JNZXNzYWdlO1xuXG4gICAgaWYgKHdvcmtlck1lc3NhZ2UubWVzc2FnZVR5cGUgPT0gV29ya2VyTWVzc2FnZVR5cGUuQ29uZmlndXJlUmVzdWx0KSB7XG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb25TdGF0ZSA9IHdvcmtlck1lc3NhZ2UuY29uZmlndXJhdGlvblN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb25TdGF0ZSAhPSBFdmVudFB1Ymxpc2hlckNvbmZpZ3VyYXRpb25TdGF0ZS5TdWNjZXNzICYmXG4gICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyICE9IHVuZGVmaW5lZFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyKFwiV29ya2VyIGV2ZW50IHB1Ymxpc2hlciBmYWlsZWRcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzb2x2ZVB1Ymxpc2god29ya2VyTWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZXNvbHZlUHVibGlzaChcbiAgICByZXN1bHRNZXNzYWdlOiBXb3JrZXJQdWJsaXNoUmVzdWx0TWVzc2FnZSB8IFdvcmtlclB1Ymxpc2hFcnJvck1lc3NhZ2UsXG4gICkge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5wcm9taXNlUmVnaXN0cnlbcmVzdWx0TWVzc2FnZS5pZF07XG4gICAgaWYgKGhhbmRsZXJzID09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHRoaXMuZXJyb3JIYW5kbGVyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmVycm9ySGFuZGxlcihcbiAgICAgICAgICBcIkV2ZW50IFB1Ymxpc2ggUmVzdWx0IGhhZCBubyBtYXRjaGluZyBoYW5kbGVycyBpbiByZWdpc3RyeVwiLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyZXN1bHRNZXNzYWdlLm1lc3NhZ2VUeXBlID09IFdvcmtlck1lc3NhZ2VUeXBlLlB1Ymxpc2hSZXN1bHQpIHtcbiAgICAgICAgaGFuZGxlcnMucmVzb2x2ZShyZXN1bHRNZXNzYWdlLnJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYW5kbGVycy5yZWplY3QocmVzdWx0TWVzc2FnZS5lcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgZGVsZXRlIHRoaXMucHJvbWlzZVJlZ2lzdHJ5W3Jlc3VsdE1lc3NhZ2UuaWRdO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlUHVibGlzaE1lc3NhZ2UoXG4gICAgZXZlbnRzOiBQdWJsaXNoRXZlbnRbXSxcbiAgKTogV29ya2VyUHVibGlzaFJlcXVlc3RNZXNzYWdlIHtcbiAgICBjb25zdCBpZCA9IHV1aWR2NygpO1xuICAgIHJldHVybiB7XG4gICAgICBpZCxcbiAgICAgIG1lc3NhZ2VUeXBlOiBXb3JrZXJNZXNzYWdlVHlwZS5QdWJsaXNoUmVxdWVzdCxcbiAgICAgIGV2ZW50czogZXZlbnRzLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHJlZ2lzdGVyUHVibGlzaFByb21pc2UoXG4gICAgbWVzc2FnZTogV29ya2VyUHVibGlzaFJlcXVlc3RNZXNzYWdlLFxuICAgIGhhbmRsZXJzOiBQcm9taXNlSGFuZGxlcnMsXG4gICk6IHZvaWQge1xuICAgIHRoaXMucHJvbWlzZVJlZ2lzdHJ5W21lc3NhZ2UuaWRdID0gaGFuZGxlcnM7XG4gIH1cblxuICBwcml2YXRlIHBvc3RQdWJsaXNoUmVxdWVzdChcbiAgICBwdWJsaXNoTWVzc2FnZTogV29ya2VyUHVibGlzaFJlcXVlc3RNZXNzYWdlLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLndvcmtlclB1Ymxpc2hlci5wb3N0TWVzc2FnZShwdWJsaXNoTWVzc2FnZSk7XG4gIH1cblxuICBwcml2YXRlIHBvc3RDb25maWdSZXF1ZXN0KGNvbmZpZzogRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgY29uZmlnTWVzc2FnZTogV29ya2VyQ29uZmlndXJhdGlvblJlcXVlc3RNZXNzYWdlID0ge1xuICAgICAgY29uZmlnLFxuICAgICAgaWQ6IHV1aWR2NygpLFxuICAgICAgbWVzc2FnZVR5cGU6IFdvcmtlck1lc3NhZ2VUeXBlLkNvbmZpZ3VyZVJlcXVlc3QsXG4gICAgfTtcbiAgICB0aGlzLndvcmtlclB1Ymxpc2hlci5wb3N0TWVzc2FnZShjb25maWdNZXNzYWdlKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJnZXRSYW5kb21WYWx1ZXMiLCJtIiwidSIsImNodW5rSWQiLCJnIiwiZ2xvYmFsVGhpcyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJvIiwib2JqIiwicHJvcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImRvY3VtZW50IiwiY3VycmVudFNjcmlwdCIsInRhZ05hbWUiLCJ0b1VwcGVyQ2FzZSIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlbmd0aCIsImkiLCJ0ZXN0IiwiRXJyb3IiLCJyZXBsYWNlIiwicCIsImIiLCJiYXNlVVJJIiwic2VsZiIsImhyZWYiLCJybmRzOCIsIlVpbnQ4QXJyYXkiLCJybmciLCJjcnlwdG8iLCJiaW5kIiwiYnl0ZVRvSGV4IiwicHVzaCIsInRvU3RyaW5nIiwic2xpY2UiLCJfc3RhdGUiLCJ2N0J5dGVzIiwicm5kcyIsIm1zZWNzIiwic2VxIiwiYnVmIiwib2Zmc2V0IiwiUmFuZ2VFcnJvciIsIkRhdGUiLCJub3ciLCJvcHRpb25zIiwiYnl0ZXMiLCJyYW5kb20iLCJzdGF0ZSIsInVwZGF0ZVY3U3RhdGUiLCJhcnIiLCJ0b0xvd2VyQ2FzZSIsInVuc2FmZVN0cmluZ2lmeSIsIkV2ZW50VHlwZSIsIkV2ZW50UHVibGlzaEVycm9yIiwiRXZlbnRQdWJsaXNoZXJDb25maWd1cmF0aW9uU3RhdGUiLCJXb3JrZXJNZXNzYWdlVHlwZSIsInZpc2l0b3IiLCJjb25zdHJ1Y3RvciIsImV2ZW50X3R5cGUiLCJWaXNpdG9yIiwiaWQiLCJ0b1B1Ymxpc2hFdmVudCIsInQiLCJhIiwidW5kZWZpbmVkIiwiY29uZmlnIiwiZXJyb3JIYW5kbGVyIiwiY29uZmlndXJhdGlvblN0YXRlIiwiYXBpX2tleSIsInRyaW0iLCJJbnZhbGlkQXBpS2V5IiwiaG9zdCIsIlVSTCIsInBhcnNlIiwicGF0aG5hbWUiLCJzZWFyY2giLCJoYXNoIiwiSW52YWxpZEhvc3QiLCJTdWNjZXNzIiwidmFsaWRhdGVFdmVudFB1Ymxpc2hlckNvbmZpZ3VyYXRpb24iLCJwcm9taXNlUmVnaXN0cnkiLCJ3b3JrZXJQdWJsaXNoZXIiLCJXb3JrZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicm91dGVNZXNzYWdlIiwibWVzc2FnZSIsInBvc3RDb25maWdSZXF1ZXN0IiwicHVibGlzaCIsImV2ZW50cyIsImNyZWF0ZVB1Ymxpc2hNZXNzYWdlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWdpc3RlclB1Ymxpc2hQcm9taXNlIiwicG9zdFB1Ymxpc2hSZXF1ZXN0Iiwid29ya2VyTWVzc2FnZSIsImRhdGEiLCJtZXNzYWdlVHlwZSIsIkNvbmZpZ3VyZVJlc3VsdCIsInJlc29sdmVQdWJsaXNoIiwicmVzdWx0TWVzc2FnZSIsImhhbmRsZXJzIiwiUHVibGlzaFJlc3VsdCIsInJlc3VsdCIsImVycm9yTWVzc2FnZSIsIlB1Ymxpc2hSZXF1ZXN0IiwicHVibGlzaE1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImNvbmZpZ01lc3NhZ2UiLCJDb25maWd1cmVSZXF1ZXN0IiwiY29uc29sZSIsImxvZyIsInRoZW4iLCJjYXRjaCIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==